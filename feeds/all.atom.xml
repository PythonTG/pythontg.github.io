<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PythonTG</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2016-10-08T12:00:00+08:00</updated><entry><title>打造数据科学作品集：搭建一个数据科学博客</title><link href="/making-data-science-blog.html" rel="alternate"></link><published>2016-10-08T12:00:00+08:00</published><updated>2016-10-08T12:00:00+08:00</updated><author><name>Vik Paruchuri</name></author><id>tag:,2016-10-08:making-data-science-blog.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;全文大约 9500 字，读完需要 15 分钟左右。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以在这里阅读本系列第一篇文章：&lt;a href="http://codingpy.com/article/data-science-portfolio-storytelling-with-data/"&gt;「打造数据科学作品集：用数据讲故事」&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写博客是证明你的实力、深入学习和建立读者群的好方法。有许多&lt;a href="https://github.com/rushter/data-science-blogs"&gt;数据科学&lt;/a&gt;和&lt;a href="https://www.quora.com/What-are-the-best-programming-blogs"&gt;编程类&lt;/a&gt;博客帮助他们的作者找到工作，或者认识了重要人物。定期写博客是有抱负的程序员和数据科学家最应该做的事情之一。&lt;/p&gt;
&lt;p&gt;不幸的是，写博客的一大障碍就是先搭建一个博客网站。在这篇文章中，我们将学习如何用 Python 创建一个博客网站，怎么用 Jupyter Notebook 写文章和如何通过 GitHub Pages 部署博客。读完这篇文章，你就可以使用你熟悉的方式，创建自己的数据科学博客了。&lt;/p&gt;
&lt;h2&gt;静态网站&lt;/h2&gt;
&lt;p&gt;基本上，一个静态网站就是一个全是 HTML 文件的文件夹。我们可以搭建一个允许别人链接到这个文件夹并获取文件的服务器。这样做的好处是不需要数据库或者其他动态部分，可以很简单的部署在像 GitHub 之类的网站上。把你的博客做成静态网站是一个好主意，因为维护起来十分简单。建立静态网站的一种方法是手写 HTML，然后上传所有的 HTML 文件到服务器。这种情况下，你至少要写一个 &lt;code&gt;index.html&lt;/code&gt; 文件。如果你的网站的 URL 是 &lt;code&gt;thebestblog.com&lt;/code&gt;，当访问者浏览 &lt;code&gt;http://www.thebestblog.com&lt;/code&gt; 时，他们就会看到 &lt;code&gt;index.html&lt;/code&gt; 的内容了。HTML 的文件夹可能是下边的这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;thebestblog.com
│   index.html
│   first-post.html
│   how-to-use-python.html
│   how-to-do-machine-learning.html
│   styles.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上边的这个网站里，访问 &lt;code&gt;http://www.thebestblog.com/first-post.html&lt;/code&gt; 你就可以看到&lt;code&gt;first-post.html&lt;/code&gt; 的内容。&lt;code&gt;first-post.html&lt;/code&gt; 可能是下边这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The best blog!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The best blog!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;First post!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the first post in what will soon become (if it already isn&amp;#39;t) the best blog.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Future posts will teach you about data science.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Thanks for visiting!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可能会立马发现手工编辑 HTML 的一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工编辑 HTML 会很枯燥。&lt;/li&gt;
&lt;li&gt;如果你想写多篇文章，你需要复制很多内容，比如样式、Title、Footer 等。&lt;/li&gt;
&lt;li&gt;如果你想整合评论系统或者其他插件，你不得不写 Javascript。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，你写博客的时候，想关注于博客内容，而不是在 HTML 上浪费时间。谢天谢地，你可以用一个叫做静态网站生成器的工具来取代手动编辑 HTML。&lt;/p&gt;
&lt;h2&gt;静态网站生成器&lt;/h2&gt;
&lt;p&gt;静态网站生成器可以让你用一些简单的格式写文章，通常是 Markdown，然后再定义一些设置。生成器可以自动把你的文章转换为 HTMl。使用静态网站生成器，你可以把 &lt;code&gt;first-post.html&lt;/code&gt; 极大地简化为 &lt;code&gt;first-post.md&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# First post!

This is the first post in what will soon become (if it already isn&amp;#39;t) the best blog.

Future posts will teach you about data science.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这比处理 HTML 文件要简单的多！通用的元素，比如 Title 和 Footer，可以放在模板里边，这样很容易更改。&lt;/p&gt;
&lt;p&gt;静态网站生成器多种多样。最流行的是用 Ruby 开发的 &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;。因为我们要搭建一个数据科学博客，所以需要网站生成器可以处理 Jupyter Notebooks。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; 是一个用 Python 开发的网站生成器，可以接受 Jupyter Notebook 文件并转换成 HTML 博客文章。Pelican 也可以很容易的把文章部署到 GitHub Pages 让别人阅读。&lt;/p&gt;
&lt;h2&gt;安装 Pelican&lt;/h2&gt;
&lt;p&gt;开始之前，&lt;a href="https://github.com/dataquestio/jupyter-blog"&gt;这里&lt;/a&gt;有一个仓库(repo)，它就是我们最终成果的示例。&lt;/p&gt;
&lt;p&gt;如果你还没有安装 Python，在开始之前你还需要做一些前期工作。&lt;a href="https://www.continuum.io/downloads"&gt;这里&lt;/a&gt;有一些安装 Python 的说明。我们建议使用 Python3.5。当你安装完成 Python：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个文件夹——我们将把博客网站的内容和样式(Styles)放在这个文件夹里。该教程把这个文件夹叫做 &lt;code&gt;jupyter-blog&lt;/code&gt;，你可以随便起名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; 进入 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;创建一个叫 &lt;code&gt;.gitignore&lt;/code&gt; 的文件，然后把&lt;a href="https://github.com/github/gitignore/blob/master/Python.gitignore"&gt;这个&lt;/a&gt;文件里的内容加进去。我们最后将要把仓库提交到 git，而这将会排除一些其他东西。&lt;/li&gt;
&lt;li&gt;创建并激活一个&lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;虚拟环境&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹里创建一个叫 &lt;code&gt;requirements.txt&lt;/code&gt; 的文件，内容如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Markdown==2.6.6
pelican==3.6.3
jupyter&amp;gt;=1.0
ipython&amp;gt;=4.0
nbconvert&amp;gt;=4.0
beautifulsoup4
ghp-import==0.4.1
matplotlib==1.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹里运行 &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; 来安装 &lt;code&gt;requirements.txt&lt;/code&gt; 里边所有的包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创建数据科学博客&lt;/h2&gt;
&lt;p&gt;完成了前边的设置之后，你就做完创建博客的准备了！在 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹里运行 &lt;code&gt;pelican-quickstart&lt;/code&gt; 命令，来为你的博客启动一个交互式安装序列。你将看到一些帮助你设置博客属性的问题。大多数问题你只需要点击 &lt;code&gt;Enter&lt;/code&gt; 使用默认设置就好了。你需要输入的就是你网站的名字、网站的作者，另外就是当问到 URL prefix(URL 前缀) 和 timezone(时区) 的时候选 &lt;code&gt;n&lt;/code&gt;。下边是个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(jupyter-blog)➜  jupyter-blog ✗ pelican-quickstart
Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? Vik&amp;#39;s Blog
&amp;gt; Who will be the author of this web site? Vik Paruchuri
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; What is your time zone? [Europe/Paris] America/Los_Angeles
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)
&amp;gt; Do you want to upload your website using FTP? (y/N)
&amp;gt; Do you want to upload your website using SSH? (y/N)
&amp;gt; Do you want to upload your website using Dropbox? (y/N)
&amp;gt; Do you want to upload your website using S3? (y/N)
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N)
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行完 &lt;code&gt;pelican-quickstart&lt;/code&gt; 以后，&lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹里多了两个文件夹 &lt;code&gt;content&lt;/code&gt; 和 &lt;code&gt;output&lt;/code&gt;，还有一些文件，比如 &lt;code&gt;pelicanconf.py&lt;/code&gt; 和 &lt;code&gt;publishconf.py&lt;/code&gt;。下边是文件夹目录的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter-blog
│   output
│   content
│   .gitignore
│   develop_server.sh
│   fabfile.py
│   Makefile
│   requirements.txt
│   pelicanconf.py
│   publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装 Jupyter 插件&lt;/h2&gt;
&lt;p&gt;Pelican 默认不支持使用 Jupyter 写文章，所以我们需要安装一个&lt;a href="https://github.com/danielfrg/pelican-ipynb"&gt;插件&lt;/a&gt;来完成这项功能。我们把插件作为一个 git &lt;a href="https://git-scm.com/docs/git-submodule"&gt;子模块(git submodule)&lt;/a&gt;来安装，这样便于管理。如果你还没有安装 git，你可以在&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;这里&lt;/a&gt;找到安装说明。当你安装完成 git 之后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 &lt;code&gt;git init&lt;/code&gt; 来把当前文件夹初始化为一个 git 仓库。&lt;/li&gt;
&lt;li&gt;创建一个叫 &lt;code&gt;plugins&lt;/code&gt; 的文件夹。&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;git submodule add git://github.com/danielfrg/pelican-ipynb.git plugins/ipynb&lt;/code&gt; 来添加插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在应该会有一个 &lt;code&gt;.gitmodules&lt;/code&gt; 文件和一个 &lt;code&gt;plugins&lt;/code&gt; 文件夹：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter-blog
│   output
│   content
│   plugins
│   .gitignore
│   .gitmodules
│   develop_server.sh
│   fabfile.py
│   Makefile
│   requirements.txt
│   pelicanconf.py
│   publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了激活插件，我们需要修改 &lt;code&gt;pelicanconf.py&lt;/code&gt; 文件，在最下边添加几行代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ipynb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./plugins&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipynb.markup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这几行代码告诉 Pelican 当生成 HTML 的时候激活插件。&lt;/p&gt;
&lt;h2&gt;写第一篇文章&lt;/h2&gt;
&lt;p&gt;插件安装完之后，就可以写你的第一篇文章了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 Jupyter notebook，简单写一些内容。&lt;a href="https://github.com/dataquestio/jupyter-blog/blob/master/content/first-post.ipynb"&gt;这里&lt;/a&gt;有一个例子。&lt;/li&gt;
&lt;li&gt;把 notebook 文件复制到 &lt;code&gt;content&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;创建一个和 &lt;code&gt;notebook&lt;/code&gt; 同名的文件，但是扩展名是 &lt;code&gt;.ipynb-meta&lt;/code&gt;。&lt;a href="https://github.com/dataquestio/jupyter-blog/blob/master/content/first-post.ipynb-meta"&gt;这里&lt;/a&gt;有一个例子。&lt;/li&gt;
&lt;li&gt;把下边的内容添加到 &lt;code&gt;ipynb-meta&lt;/code&gt; 文件中，但是根据你自己的文章修改相应字段：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;firsts&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vik&lt;/span&gt; &lt;span class="n"&gt;Paruchuri&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里以上字段的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Title&lt;/code&gt;——文章的标题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Slug&lt;/code&gt;——你的文章在服务器上的路径。如果 slug 是 &lt;code&gt;first-post&lt;/code&gt;，而且你的服务器地址是 &lt;code&gt;jupyter-blog.com&lt;/code&gt;, 你可以在 &lt;code&gt;http://www.jupyter-blog.com/first-post&lt;/code&gt; 这个地址找到你的文章。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;——文章发布的日期。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Category&lt;/code&gt;——文章的类别——可以是任何东西。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tags&lt;/code&gt;——文章的标签。可以随便挂标签。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Author&lt;/code&gt;——文章作者的名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Summary&lt;/code&gt;——文章的摘要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每发布一篇文章，就需要复制一个 notebook 文件，并创建一个 &lt;code&gt;ipynb-meta&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;创建好 notebook 和 meta 文件后，就可以生成博客 HTML 文件了。下边是 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹现在的样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter-blog
│   output
│   content
    │   first-post.ipynb
    │   first-post.ipynb-meta
│   plugins
│   .gitignore
│   .gitmodules
│   develop_server.sh
│   fabfile.py
│   Makefile
│   requirements.txt
│   pelicanconf.py
│   publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;生成 HTML&lt;/h2&gt;
&lt;p&gt;为了从文章生成 HTML，我们需要先运行 Pelican 来把 notebooks 转换为 HTML，然后运行本地服务器来查看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换到 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;pelican content&lt;/code&gt; 来生成 HTML。&lt;/li&gt;
&lt;li&gt;切换到 &lt;code&gt;output&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;python -m pelican.server&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在浏览器里访问 &lt;code&gt;localhost:8000&lt;/code&gt; 来预览你的博客。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在浏览器里就可以看到博客里所有文章的列表，以及具体的博客内容了。&lt;/p&gt;
&lt;h2&gt;创建 GitHub Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; 是 GitHub 的一项功能，允许你快速部署静态网站，让所有人都可以通过特定 URL 访问。为了完成它的配置，我们需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;注册&lt;/a&gt;一个 GitHub 帐号，如果你还没有的话。&lt;/li&gt;
&lt;li&gt;创建一个叫 &lt;code&gt;username.github.io&lt;/code&gt; 的仓库，这里 &lt;code&gt;username&lt;/code&gt; 是你的 GitHub 用户名。&lt;a href="https://help.github.com/articles/create-a-repo/"&gt;这里&lt;/a&gt;有更详细的说明告诉你怎么做。&lt;/li&gt;
&lt;li&gt;切换到 &lt;code&gt;jupyter-blog&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;git remote add origin git@github.com:username/username.github.io.git&lt;/code&gt; 把这个仓库作为远程仓库添加到你的本地仓库，把所有的 &lt;code&gt;username&lt;/code&gt; 参数替换为你的 GitHub 用户名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub Pages 会把 &lt;code&gt;username.github.io&lt;/code&gt; 仓库的 &lt;code&gt;master&lt;/code&gt; 分支下的所有 HTML 文件展示到 &lt;code&gt;username.github.io&lt;/code&gt; 这个地址（仓库和 URL 是一样的）。&lt;/p&gt;
&lt;p&gt;首先我们需要修改 Pelican 使得 URL 指向正确的位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;publishconf.py&lt;/code&gt; 文件里编辑 &lt;code&gt;SITEURL&lt;/code&gt;，把它设置为 &lt;code&gt;http://username.github.io&lt;/code&gt; ，&lt;code&gt;username&lt;/code&gt; 还是你的GitHub用户名。&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;pelican content -s publishconf.py&lt;/code&gt;。当你想在本地预览你的博客的时候，运行 &lt;code&gt;pelican content&lt;/code&gt;。在部署之前运行 &lt;code&gt;pelican content -s publishconf.py&lt;/code&gt;。这将使用正确的配置文件进行部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;提交文件&lt;/h2&gt;
&lt;p&gt;如果你想把 notebooks 和其他文件作为一个 GitHub Page 放在同一个仓库里，你可以使用分支。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 &lt;code&gt;git checkout dev&lt;/code&gt; 切换到一个叫 &lt;code&gt;dev&lt;/code&gt; 的分支。我们不能用 &lt;code&gt;master&lt;/code&gt; 分支来存放 notebooks，因为那个分支是用于 GitHub Pages 展示的。&lt;/li&gt;
&lt;li&gt;创建一个提交，然后和正常一样推送到 Github（使用 &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;，和 &lt;code&gt;git push&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;部署到 GitHub Pages&lt;/h2&gt;
&lt;p&gt;为了让 Github Pages 正常工作，我们需要把文章添加到 &lt;code&gt;master&lt;/code&gt; 分支中。现在，&lt;code&gt;HTML&lt;/code&gt; 内容在 &lt;code&gt;output&lt;/code&gt; 文件夹中，但是我们需要把它放到仓库的根目录，而不是子目录。我们可以使用 &lt;code&gt;ghp-import&lt;/code&gt; 工具来完成这项工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 &lt;code&gt;ghp-import output -b master&lt;/code&gt;，把 &lt;code&gt;output&lt;/code&gt; 目录下的所有东西导入 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;git push origin master&lt;/code&gt; 把你的内容推送到 GitHub。&lt;/li&gt;
&lt;li&gt;尝试访问 &lt;code&gt;username.github.io&lt;/code&gt; ——你就可以看到你的页面了！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改博客后，只要重新运行 &lt;code&gt;pelican content -s publishconf.py&lt;/code&gt;, &lt;code&gt;ghp-import&lt;/code&gt; 和 &lt;code&gt;git push&lt;/code&gt;，你的 GitHub Page 就会更新了。&lt;/p&gt;
&lt;h2&gt;下一步&lt;/h2&gt;
&lt;p&gt;终于搭建好了！你现在可以创作博客，然后推送到 GitHub Pages。所有人都可以通过 &lt;code&gt;username.github.io&lt;/code&gt; 来访问你的博客（记得把 username 替换为你的 GitHub 用户名）。这给你提供了一个展示数据科学作品集的渠道。&lt;/p&gt;
&lt;p&gt;随着文章数和读者越来越多，你可能就需要在以下方面更深入的研究一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主题：Pelican 支持主题。在&lt;a href="https://github.com/getpelican/pelican-themes"&gt;这里&lt;/a&gt;你可以看到很多主题，随便选一个你喜欢的用吧。&lt;/li&gt;
&lt;li&gt;自定义URL：使用 &lt;code&gt;username.github.io&lt;/code&gt; 已经不错了，但是有时候你可能需要自定义域名。&lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;这里&lt;/a&gt;是自定义 GitHub Pages 域名的指南。&lt;/li&gt;
&lt;li&gt;插件：&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;这里&lt;/a&gt;有一个插件列表。插件可以帮助你设置网站数据分析，实现评论等功能。&lt;/li&gt;
&lt;li&gt;推广：试着把你的文章推广到 &lt;a href="http://www.datatau.com/"&gt;DataTau&lt;/a&gt;, &lt;a href="http://www.twitter.com/"&gt;Twitter&lt;/a&gt;, &lt;a href="http://www.quora.com/"&gt;Quora&lt;/a&gt;或者其他一些网站，可以帮助你获得更多的读者。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="数据科学"></category><category term="静态网站"></category></entry></feed>